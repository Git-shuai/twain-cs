;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWAIN Certification Script
;   Run all tests needed to pass TWAIN self-certification.
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;
; Globals
;   g_certifyresult - pass/fail result of all tests
;
; Locals
;   title - script info
;   twidentity.productname - product name of scanner to test
;
; Returns
;   pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize stuff...
;
setlocal title 'TWAIN Certification Script v1.0 21-Feb-2020'
setlocal twidentity.productname '${arg:1}'
setglobal g_certifyresult 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize our report...
;
report initialize '${get:twidentity.productname}'
call ECHOANDLOG info '${get:title}'
call ECHOANDLOG info '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
call ECHOANDLOG info 'operating system is ${platform:}'
call ECHOANDLOG info 'program is ${program:}'
call ECHOANDLOG info 'started at ${localtime:yyyy-MM-dd/hh:mm:ss}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Load our global tables...
;
run '${folder:certification}/LoadTables'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Run all the tests...
;
call RUNCERTIFICATION '010 - TWAIN Standard Capability Tests' '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '020 - Vendor Custom Capability Tests'  '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '030 - Status Return Tests'             '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '040 - Stress Tests'                    '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '050 - Non-UI Image Transfer Tests'     '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '060 - UI Image Transfer Tests'         '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '070 - CAP_XFERCOUNT Tests'             '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '090 - Verify Values for MSG_OPENDS, MSG_RESET, and MSG_RESETALL' '${get:twidentity.productname}' g_certifyresult



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; How did we do?
;
if '${get:g_certifyresult}' != 'pass' goto MAIN.FAIL
call ECHOANDLOG info
call ECHOANDLOG info
call ECHOANDLOG info
call ECHOANDLOG info 'ended at ${localtime:yyyy-MM-dd/hh:mm:ss}'
call ECHOANDLOG info '**************************************'
call ECHOANDLOG info 'The scanner passed TWAIN Certification'
call ECHOANDLOG info '**************************************'
report save
echo 'report saved to ${report:}'
return 'pass'
;
:MAIN.FAIL
call ECHOANDLOG error
call ECHOANDLOG error
call ECHOANDLOG error
call ECHOANDLOG error 'ended at ${localtime:yyyy-MM-dd/hh:mm:ss}'
call ECHOANDLOG error '********************************************'
call ECHOANDLOG error 'The scanner did not pass TWAIN Certification'
call ECHOANDLOG error '********************************************'
report save
echo 'report saved to ${report:}'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: RunCertification
; arg:1 - folder to run in
; arg:2 - TW_IDENTITY.ProductName of scanner to test
; arg:3 - global value to update on fail
; returns: (none)
;
:RUNCERTIFICATION
;
cd '${folder:certification}/${arg:1}'
run Certification '${arg:2}' '${arg:3}'
cd '${folder:certification}'
return 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Certify
; arg:1 - script to run
; arg:2 - TW_IDENTITY.ProductName of scanner to test
; arg:3 - global value to update on fail
; returns: (none)
;
:CERTIFY
;
run '${arg:1}' '${arg:2}'
if '${ret:}' != 'pass' goto CERTIFY.FAIL
return 'pass'
;
:CERTIFY.FAIL
setglobal '${arg:3}' 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: EchoAndLog
; arg:1 - severity (normal, info, error)
; arg:2 - text
; returns: (none)
;
:ECHOANDLOG
;
if '${arg:1}' == 'info' goto ECHOANDLOG.INFO
echo.red '${arg:2}'
log error '#${arg:2}'
return
:ECHOANDLOG.INFO
echo.green '${arg:2}'
log info '#${arg:2}'
:ECHOANDLOG.ERROR
return
