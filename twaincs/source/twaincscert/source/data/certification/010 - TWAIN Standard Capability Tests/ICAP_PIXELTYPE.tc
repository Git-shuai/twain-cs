;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ICAP_PIXELTYPE/ICAP_BITDEPTH
; arg:1 - scanner to test
; returns: pass or fail
;
; Confirm Basic Negotiation with ICAP_PIXELTYPE/ICAP_BITDEPTH
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
call INITIALIZE 'ICAP_PIXELTYPE/ICAP_BITDEPTH v1.0 12-Feb-2020' '${arg:1}'
set index.twcapability.cap '0'
set index.twcapability.contype '1'
set index.twcapability.hcontainer '2'
set index.twenumeration.itemtype '2'
set index.twenumeration.numitems '3'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWPT_BW MSG_SET
; If result is not TWRC_SUCCESS, then proceed to the TWPT_GRAY test
;
set name 'TWPT_BW MSG_SET'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PIXELTYPE,TWON_ONEVALUE,TWTY_UINT16,TWPT_BW'
if '${sts:}' != 'SUCCESS' goto MAIN.TWPTGRAY
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWPT_BW MSG_GET ICAP_BITDEPTH
;
set name 'TWPT_BW MSG_GET ICAP_BITDEPTH'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_BITDEPTH,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'
set icap_bitdepth '${ret:}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.ConType is not TWON_ENUMERATION, then proceed to the TWPT_RGB test below
; SPECNOTE: well, this is wrong, goto TWPT_GRAY
;
set name 'TWPT_BW TW_CAPABILITY.ConType is TWON_ENUMERATION'
if '${getindex:icap_bitdepth.${get:index.twcapability.contype}}' != 'TWON_ENUMERATION' goto MAIN.TWPTGRAY
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.hContainer is not a valid TW_HANDLE value, then end with error
; (just see if we have more data, that'll satisfy the test)
;
set name 'TWPT_BW TW_CAPABILITY.hContainer is TW_HANDLE'
if '${getindex:icap_bitdepth.${get:index.twcapability.hcontainer}}' == '' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_ENUMERATION.ItemType is not TWTY_UINT16, then end with error
;
set name 'TWPT_BW TW_ENUMERATION.ItemType is TWTY_UINT16'
if '${getindex:icap_bitdepth.${get:index.twenumeration.itemtype}}' != 'TWTY_UINT16' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If the TW_ENUMERATION.ItemList includes a value of 8 or 24, then end with error
;
set name 'TWPT_BW TW_ENUMERATION does not contain 8 or 24'
call CHECKENUMERATION '${get:icap_bitdepth}' '8' '24'
if '${ret:}' == 'pass' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWPT_GRAY MSG_SET
; If result is not TWRC_SUCCESS, then proceed to the TWPT_RGB test
;
:MAIN.TWPTGRAY
set name 'TWPT_GRAY MSG_SET'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PIXELTYPE,TWON_ONEVALUE,TWTY_UINT16,TWPT_GRAY'
if '${sts:}' != 'SUCCESS' goto MAIN.TWPTRGB
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWPT_GRAY MSG_GET ICAP_BITDEPTH
;
set name 'TWPT_GRAY MSG_GET ICAP_BITDEPTH'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_BITDEPTH,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'
set icap_bitdepth '${ret:}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.ConType is not TWON_ENUMERATION, then proceed to the TWPT_RGB test below
;
set name 'TWPT_GRAY TW_CAPABILITY.ConType is TWON_ENUMERATION'
if '${getindex:icap_bitdepth.${get:index.twcapability.contype}}' != 'TWON_ENUMERATION' goto MAIN.TWPTRGB
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.hContainer is not a valid TW_HANDLE value, then end with error
; (just see if we have more data, that'll satisfy the test)
;
set name 'TWPT_GRAY TW_CAPABILITY.hContainer is TW_HANDLE'
if '${getindex:icap_bitdepth.${get:index.twcapability.hcontainer}}' == '' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_ENUMERATION.ItemType is not TWTY_UINT16, then end with error
;
set name 'TWPT_GRAY TW_ENUMERATION.ItemType is TWTY_UINT16'
if '${getindex:icap_bitdepth.${get:index.twenumeration.itemtype}}' != 'TWTY_UINT16' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If the TW_ENUMERATION.ItemList includes a value of 1 or 24, then end with error
;
set name 'TWPT_GRAY TW_ENUMERATION does not contain 1 or 24'
call CHECKENUMERATION '${get:icap_bitdepth}' '1' '24'
if '${ret:}' == 'pass' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWPT_RGB MSG_SET
; If result is not TWRC_SUCCESS, then pass
;
:MAIN.TWPTRGB
set name 'TWPT_RGB MSG_SET'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PIXELTYPE,TWON_ONEVALUE,TWTY_UINT16,TWPT_RGB'
if '${sts:}' != 'SUCCESS' goto MAIN.PASS
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWPT_RGB MSG_GET ICAP_BITDEPTH
;
set name 'TWPT_RGB MSG_GET ICAP_BITDEPTH'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_BITDEPTH,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'
set icap_bitdepth '${ret:}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.ConType is not TWON_ENUMERATION, then pass
;
set name 'TWPT_RGB TW_CAPABILITY.ConType is TWON_ENUMERATION'
if '${getindex:icap_bitdepth.${get:index.twcapability.contype}}' != 'TWON_ENUMERATION' goto MAIN.PASS
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.hContainer is not a valid TW_HANDLE value, then end with error
; (just see if we have more data, that'll satisfy the test)
;
set name 'TWPT_RGB TW_CAPABILITY.hContainer is TW_HANDLE'
if '${getindex:icap_bitdepth.${get:index.twcapability.hcontainer}}' == '' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_ENUMERATION.ItemType is not TWTY_UINT16, then end with error
;
set name 'TWPT_RGB TW_ENUMERATION.ItemType is TWTY_UINT16'
if '${getindex:icap_bitdepth.${get:index.twenumeration.itemtype}}' != 'TWTY_UINT16' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If the TW_ENUMERATION.ItemList includes a value of 1 or 8, then end with error
;
set name 'TWPT_RGB TW_ENUMERATION does not contain 1 or 8'
call CHECKENUMERATION '${get:icap_bitdepth}' '1' '8'
if '${ret:}' == 'pass' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; Did we pass?
:MAIN.PASS
echopassfail 'SUMMARY' 'pass'
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'error'
:MAIN.ERROR
echopassfail 'SUMMARY' 'error'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Initialize
; arg:1 - name of this test suite
; arg:2 - scanner to test
; returns: true or false
;
:INITIALIZE
;
echo.yellow
echo.yellow
echo.yellow
echo.yellow '********************************************************************************'
echo.yellow '${arg:1}'
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Check Enumeration
; arg:1 - enumeration to check
; arg:2/n - values to check for
; returns: pass/fail
;
:CHECKENUMERATION
;
set enum '${arg:1}'
set ee '5'
:NEXTENUM
increment ee '${get:ee}'
if '${getindex:enum.${get:ee}}' == '' goto CHECKENUMERATION.FAIL
set aa '2'
:NEXTARG
if '${arg:${get:aa}}' == '' goto NEXTENUM
if '${arg:${get:aa}}' == '${getindex:enum.${get:ee}}' goto CHECKENUMERATION.PASS
increment aa '${get:aa}'
goto NEXTARG
:CHECKENUMERATION.FAIL
return 'fail'
:CHECKENUMERATION.PASS
return 'pass'