;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ICAP_XFERMECH
; arg:1 - scanner to test
; returns: pass or fail
;
; Confirm Basic Negotiation with ICAP_XFERMECH
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
call INITIALIZE 'ICAP_XFERMECH v1.0 12-Feb-2020' '${arg:1}'
set index.twcapability.cap '0'
set index.twcapability.contype '1'
set index.twcapability.hcontainer '2'
set index.twenumeration.itemtype '2'
set index.twenumeration.numitems '3'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MSG_GET ICAP_XFERMECH
; If result is not TWRC_SUCCESS, then end with error
;
set name 'MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_XFERMECH,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'
set icap_xfermech '${ret:}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.Cap is not ICAP_XFERMECH, then end with error
;
set name 'TW_CAPABILITY.Cap is ICAP_XFERMECH'
if '${getindex:icap_xfermech.${get:index.twcapability.cap}}' != 'ICAP_XFERMECH' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.ConType is not TWON_ENUMERATION, then end with error
;
set name 'TW_CAPABILITY.ConType is TWON_ENUMERATION'
if '${getindex:icap_xfermech.${get:index.twcapability.contype}}' != 'TWON_ENUMERATION' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_CAPABILITY.hContainer is not a valid TW_HANDLE value, then end with error
; (just see if we have more data, that'll satisfy the test)
;
set name 'TW_CAPABILITY.hContainer is TW_HANDLE'
if '${getindex:icap_xfermech.${get:index.twcapability.hcontainer}}' == '' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_ENUMERATION.ItemType is not TWTY_UINT16, then end with error
;
set name 'TW_ENUMERATION.ItemType is TWTY_UINT16'
if '${getindex:icap_xfermech.${get:index.twarray.itemtype}}' != 'TWTY_UINT16' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_ENUMERATION contains TWSX_NATIVE (0)...
;
set name 'TW_ENUMERATION contains TWSX_NATIVE'
call CHECKENUMERATION '${get:icap_xfermech}' '0'
if '${ret:}' == 'pass' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If TW_ENUMERATION contains TWSX_MEMORY (2)...
;
set name 'TW_ENUMERATION contains TWSX_MEMORY'
call CHECKENUMERATION '${get:icap_xfermech}' '2'
if '${ret:}' == 'pass' goto MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; Did we pass?
:MAIN.PASS
echopassfail 'SUMMARY' 'pass'
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
echopassfail '${get:name}' 'error'
:MAIN.ERROR
echopassfail 'SUMMARY' 'error'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Initialize
; arg:1 - name of this test suite
; arg:2 - scanner to test
; returns: true or false
;
:INITIALIZE
;
echo.yellow
echo.yellow
echo.yellow
echo.yellow '********************************************************************************'
echo.yellow '${arg:1}'
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Check Enumeration
; arg:1 - enumeration to check
; arg:2/n - values to check for
; returns: pass/fail
;
:CHECKENUMERATION
;
set enum '${arg:1}'
set ee '5'
:NEXTENUM
increment ee '${get:ee}'
if '${getindex:enum.${get:ee}}' == '' goto CHECKENUMERATION.FAIL
set aa '2'
:NEXTARG
if '${arg:${get:aa}}' == '' goto NEXTENUM
if '${arg:${get:aa}}' == '${getindex:enum.${get:ee}}' goto CHECKENUMERATION.PASS
increment aa '${get:aa}'
goto NEXTARG
:CHECKENUMERATION.FAIL
return 'fail'
:CHECKENUMERATION.PASS
return 'pass'